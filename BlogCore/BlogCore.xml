<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlogCore</name>
    </assembly>
    <members>
        <member name="T:BlogCore.AOP.BlogCacheAOP">
            <summary>
            定义缓存拦截器 面向切面的缓存使用
            </summary>
        </member>
        <member name="M:BlogCore.AOP.BlogCacheAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercept方法是拦截的关键所在
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:BlogCore.AOP.BlogLogAOP">
            <summary>
            拦截器BlogLogAOP 继承自IInterceptor接口
            </summary>
        </member>
        <member name="M:BlogCore.AOP.BlogLogAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实例化IInterceptor的唯一方法
            </summary>
            <param name="invocation">包含被拦截方法的信息</param>
        </member>
        <member name="M:BlogCore.AuthHelper.OverWrite.JwtHelper.IssueJwt(BlogCore.AuthHelper.OverWrite.TokenModelJwt)">
            <summary>
            颁发JWT字符串
            </summary>
            <param name="tokenModel"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.AuthHelper.OverWrite.JwtHelper.SerializeJwt(System.String)">
            <summary>
            解析
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="P:BlogCore.AuthHelper.OverWrite.TokenModelJwt.Uid">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.OverWrite.TokenModelJwt.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.OverWrite.TokenModelJwt.Work">
            <summary>
            职能
            </summary>
        </member>
        <member name="F:BlogCore.AuthHelper.OverWrite.JwtTokenAuth._next">
            <summary>
            
            </summary>
        </member>
        <member name="M:BlogCore.AuthHelper.OverWrite.JwtTokenAuth.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:BlogCore.AuthHelper.OverWrite.JwtTokenAuth.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:BlogCore.AuthHelper.Policys.PermissionHandler">
            <summary>
            权限授权处理器
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionHandler.Schemes">
            <summary>
            验证方案提供对象
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionHandler.RoleModulePermissionServices">
            <summary>
            services 层注入
            </summary>
        </member>
        <member name="M:BlogCore.AuthHelper.Policys.PermissionHandler.#ctor(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider,BlogCore.IServices.IRoleModulePermissionServices)">
            <summary>
            构造函数注入
            </summary>
            <param name="schemes"></param>
            <param name="roleModulePermissionServices"></param>
        </member>
        <member name="T:BlogCore.AuthHelper.Policys.PermissionItem">
            <summary>
            用户或角色或其他凭据实体,就像是订单详情一样
            之前的名字是 Permission
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionItem.Role">
            <summary>
            用户或角色或其他凭据名称
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionItem.Url">
            <summary>
            请求Url
            </summary>
        </member>
        <member name="T:BlogCore.AuthHelper.Policys.PermissionRequirement">
            <summary>
            必要参数类，类似一个订单信息
            继承 IAuthorizationRequirement，用于设计自定义权限处理器PermissionHandler
            因为AuthorizationHandler 中的泛型参数 TRequirement 必须继承 IAuthorizationRequirement
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionRequirement.Permissions">
            <summary>
            用户权限集合，一个订单包含了很多详情，
            同理，一个网站的认证发行中，也有很多权限详情(这里是Role和URL的关系)
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionRequirement.DeniedAction">
            <summary>
            无权限action
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionRequirement.ClaimType">
            <summary>
            认证授权类型
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionRequirement.LoginPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionRequirement.Issuer">
            <summary>
            发行人
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionRequirement.Audience">
            <summary>
            订阅人
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionRequirement.Expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionRequirement.SigningCredentials">
            <summary>
            签名验证
            </summary>
        </member>
        <member name="M:BlogCore.AuthHelper.Policys.PermissionRequirement.#ctor(System.String,System.Collections.Generic.List{BlogCore.AuthHelper.Policys.PermissionItem},System.String,System.String,System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.TimeSpan)">
            <summary>
            构造
            </summary>
            <param name="deniedAction">拒约请求的url</param>
            <param name="permissions">权限集合</param>
            <param name="claimType">声明类型</param>
            <param name="issuer">发行人</param>
            <param name="audience">订阅人</param>
            <param name="signingCredentials">签名验证实体</param>
            <param name="expiration">过期时间</param>
        </member>
        <member name="M:BlogCore.AutoMapper.CustomProfile.#ctor">
            <summary>
            构造函数创建关系映射
            </summary>
        </member>
        <member name="M:BlogCore.Controllers.CustomInfoController.Get(System.Int32,System.String)">
            <summary>
            获取客户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.ValuesController.Get">
            <summary>
            get vluaes
            </summary>
            <returns></returns>
        </member>
        <member name="T:BlogCore.MiddleWares.RequRespLogMildd">
            <summary>
            中间件
            记录请求和响应数据
            </summary>
        </member>
        <member name="F:BlogCore.MiddleWares.RequRespLogMildd._next">
            <summary>
            
            </summary>
        </member>
        <member name="M:BlogCore.MiddleWares.RequRespLogMildd.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
    </members>
</doc>
