<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlogCore</name>
    </assembly>
    <members>
        <member name="T:BlogCore.AOP.BlogCacheAOP">
            <summary>
            定义缓存拦截器 面向切面的缓存使用
            </summary>
        </member>
        <member name="M:BlogCore.AOP.BlogCacheAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercept方法是拦截的关键所在
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:BlogCore.AOP.BlogLogAOP">
            <summary>
            拦截器BlogLogAOP 继承自IInterceptor接口
            </summary>
        </member>
        <member name="M:BlogCore.AOP.BlogLogAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实例化IInterceptor的唯一方法
            </summary>
            <param name="invocation">包含被拦截方法的信息</param>
        </member>
        <member name="M:BlogCore.AuthHelper.OverWrite.JwtHelper.IssueJwt(BlogCore.AuthHelper.OverWrite.TokenModelJwt)">
            <summary>
            颁发JWT字符串
            </summary>
            <param name="tokenModel"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.AuthHelper.OverWrite.JwtHelper.SerializeJwt(System.String)">
            <summary>
            解析
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="P:BlogCore.AuthHelper.OverWrite.TokenModelJwt.Uid">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.OverWrite.TokenModelJwt.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.OverWrite.TokenModelJwt.Work">
            <summary>
            职能
            </summary>
        </member>
        <member name="F:BlogCore.AuthHelper.OverWrite.JwtTokenAuth._next">
            <summary>
            
            </summary>
        </member>
        <member name="M:BlogCore.AuthHelper.OverWrite.JwtTokenAuth.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:BlogCore.AuthHelper.OverWrite.JwtTokenAuth.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:BlogCore.AuthHelper.Policys.JwtToken">
            <summary>
            JWTToken生成类
            </summary>
        </member>
        <member name="M:BlogCore.AuthHelper.Policys.JwtToken.BuildJwtToken(System.Security.Claims.Claim[],BlogCore.AuthHelper.Policys.PermissionRequirement)">
            <summary>
            获取基于JWT的Token
            </summary>
            <param name="claims">需要在登陆的时候配置</param>
            <param name="permissionRequirement">在startup中定义的参数</param>
            <returns></returns>
        </member>
        <member name="T:BlogCore.AuthHelper.Policys.PermissionHandler">
            <summary>
            权限授权处理器
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionHandler.Schemes">
            <summary>
            验证方案提供对象
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionHandler.RoleModulePermissionServices">
            <summary>
            services 层注入
            </summary>
        </member>
        <member name="M:BlogCore.AuthHelper.Policys.PermissionHandler.#ctor(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider,BlogCore.IServices.IRoleModulePermissionServices)">
            <summary>
            构造函数注入
            </summary>
            <param name="schemes"></param>
            <param name="roleModulePermissionServices"></param>
        </member>
        <member name="T:BlogCore.AuthHelper.Policys.PermissionItem">
            <summary>
            用户或角色或其他凭据实体,就像是订单详情一样
            之前的名字是 Permission
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionItem.Role">
            <summary>
            用户或角色或其他凭据名称
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionItem.Url">
            <summary>
            请求Url
            </summary>
        </member>
        <member name="T:BlogCore.AuthHelper.Policys.PermissionRequirement">
            <summary>
            必要参数类，类似一个订单信息
            继承 IAuthorizationRequirement，用于设计自定义权限处理器PermissionHandler
            因为AuthorizationHandler 中的泛型参数 TRequirement 必须继承 IAuthorizationRequirement
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionRequirement.Permissions">
            <summary>
            用户权限集合，一个订单包含了很多详情，
            同理，一个网站的认证发行中，也有很多权限详情(这里是Role和URL的关系)
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionRequirement.DeniedAction">
            <summary>
            无权限action
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionRequirement.ClaimType">
            <summary>
            认证授权类型
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionRequirement.LoginPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionRequirement.Issuer">
            <summary>
            发行人
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionRequirement.Audience">
            <summary>
            订阅人
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionRequirement.Expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:BlogCore.AuthHelper.Policys.PermissionRequirement.SigningCredentials">
            <summary>
            签名验证
            </summary>
        </member>
        <member name="M:BlogCore.AuthHelper.Policys.PermissionRequirement.#ctor(System.String,System.Collections.Generic.List{BlogCore.AuthHelper.Policys.PermissionItem},System.String,System.String,System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.TimeSpan)">
            <summary>
            构造
            </summary>
            <param name="deniedAction">拒约请求的url</param>
            <param name="permissions">权限集合</param>
            <param name="claimType">声明类型</param>
            <param name="issuer">发行人</param>
            <param name="audience">订阅人</param>
            <param name="signingCredentials">签名验证实体</param>
            <param name="expiration">过期时间</param>
        </member>
        <member name="M:BlogCore.AutoMapper.CustomProfile.#ctor">
            <summary>
            构造函数创建关系映射
            </summary>
        </member>
        <member name="M:BlogCore.Controllers.CustomInfoController.Get(System.Int32,System.String)">
            <summary>
            获取客户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.CustomInfoController.Post(BlogCore.Model.Models.CustomInfo)">
            <summary>
            添加顾客信息 无权限
            </summary>
            <param name="custom"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.CustomInfoController.Put(BlogCore.Model.Models.CustomInfo)">
            <summary>
            修改顾客信息
            </summary>
            <param name="custom"></param>
            <returns></returns>
        </member>
        <member name="T:BlogCore.Controllers.ExtraOtherProjectController">
            <summary>
            预定表添加额外信息 额外布置 延时 套餐外加人
            </summary>
        </member>
        <member name="M:BlogCore.Controllers.ExtraOtherProjectController.Post(BlogCore.Model.Models.ExtraOtherProject)">
            <summary>
            添加预定信息
            </summary>
            <param name="advisoryInfo"></param>
            <returns></returns>
        </member>
        <member name="T:BlogCore.Controllers.ExtraProjectInfoController">
            <summary>
            派对额外信息
            </summary>
        </member>
        <member name="M:BlogCore.Controllers.ExtraProjectInfoController.Post(BlogCore.Model.Models.ExtraProjectInfo)">
            <summary>
            添加预定信息
            </summary>
            <param name="advisoryInfo"></param>
            <returns></returns>
        </member>
        <member name="T:BlogCore.Controllers.ImgController">
            <summary>
            图片管理
            </summary>
        </member>
        <member name="M:BlogCore.Controllers.ImgController.DownImg(Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            下载图片（支持中文字符）
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.ImgController.InsertPicture(Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            上传图片,多文件，可以使用 postman 测试，
            如果是单文件，可以 参数写 IFormFile file1
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.LoginController.GetJwtToken3(System.String,System.String)">
            <summary>
            获取JWT的方法3
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="T:BlogCore.Controllers.ModuleController">
            <summary>
            接口管理
            </summary>
        </member>
        <member name="M:BlogCore.Controllers.ModuleController.#ctor(BlogCore.IServices.IModuleServices)">
            <summary>
            构造函数
            </summary>
            <param name="moduleServices"></param>
        </member>
        <member name="M:BlogCore.Controllers.ModuleController.Get(System.Int32,System.String)">
            <summary>
            获取全部接口api
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.ModuleController.Post(BlogCore.Model.Models.Module)">
            <summary>
            添加一条接口信息
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.ModuleController.Put(BlogCore.Model.Models.Module)">
            <summary>
            更新接口信息
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.ModuleController.Delete(System.Int32)">
            <summary>
            删除一条接口
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BlogCore.Controllers.PartyAdvisoryInfoController">
            <summary>
            派对咨询信息
            </summary>
        </member>
        <member name="M:BlogCore.Controllers.PartyAdvisoryInfoController.Post(BlogCore.Model.Models.PartyAdvisoryInfo)">
            <summary>
            添加预定信息
            </summary>
            <param name="advisoryInfo"></param>
            <returns></returns>
        </member>
        <member name="T:BlogCore.Controllers.PartyBookInfoController">
            <summary>
            派对咨询信息
            </summary>
        </member>
        <member name="M:BlogCore.Controllers.PartyBookInfoController.Post(BlogCore.Model.Models.PartyBookInfo)">
            <summary>
            添加预定信息
            </summary>
            <param name="advisoryInfo"></param>
            <returns></returns>
        </member>
        <member name="T:BlogCore.Controllers.PartyDemandsController">
            <summary>
            派对客户需求物品
            </summary>
        </member>
        <member name="M:BlogCore.Controllers.PartyDemandsController.Post(BlogCore.Model.Models.PartyDemands)">
            <summary>
            添加预定信息
            </summary>
            <param name="advisoryInfo"></param>
            <returns></returns>
        </member>
        <member name="T:BlogCore.Controllers.PermissionController">
            <summary>
            菜单管理
            </summary>
        </member>
        <member name="M:BlogCore.Controllers.PermissionController.#ctor(BlogCore.IServices.IPermissionServices,BlogCore.IServices.IModuleServices,BlogCore.IServices.IRoleModulePermissionServices,BlogCore.IServices.IUserRoleServices,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            构造函数
            </summary>
            <param name="permissionServices"></param>
            <param name="moduleServices"></param>
            <param name="roleModulePermissionServices"></param>
            <param name="userRoleServices"></param>
            <param name="httpContext"></param>
        </member>
        <member name="M:BlogCore.Controllers.PermissionController.Get(System.Int32,System.String)">
            <summary>
            获取菜单
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.PermissionController.Post(BlogCore.Model.Models.Permission)">
            <summary>
            添加一个菜单
            </summary>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.PermissionController.Assign(BlogCore.Controllers.AssignView)">
            <summary>
            保存菜单权限分配
            </summary>
            <param name="assignView"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.PermissionController.GetPermissionTree(System.Int32,System.Boolean)">
            <summary>
            获取菜单树
            </summary>
            <param name="pid"></param>
            <param name="needbtn"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.PermissionController.GetNavigationBar(System.Int32)">
            <summary>
            获取路由树
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.PermissionController.GetPermissionIdByRoleId(System.Int32)">
            <summary>
            通过角色获取菜单【无权限】
            </summary>
            <param name="rid"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.PermissionController.Put(BlogCore.Model.Models.Permission)">
            <summary>
            更新菜单
            </summary>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.PermissionController.Delete(System.Int32)">
            <summary>
            删除菜单
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BlogCore.Controllers.RoleController">
            <summary>
            角色管理
            </summary>
        </member>
        <member name="M:BlogCore.Controllers.RoleController.#ctor(BlogCore.IServices.IRoleServices)">
            <summary>
            构造函数
            </summary>
            <param name="roleServices"></param>
        </member>
        <member name="M:BlogCore.Controllers.RoleController.Get(System.Int32,System.String)">
            <summary>
            获取全部角色
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.RoleController.Post(BlogCore.Model.Models.Role)">
            <summary>
            添加角色
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.RoleController.Put(BlogCore.Model.Models.Role)">
            <summary>
            更新角色
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.RoleController.Delete(System.Int32)">
            <summary>
            删除角色
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BlogCore.Controllers.TopicController">
            <summary>
            类别管理【无权限】
            </summary>
        </member>
        <member name="M:BlogCore.Controllers.TopicController.#ctor(BlogCore.IServices.ITopicServices)">
            <summary>
            构造函数
            </summary>
            <param name="topicServices"></param>
        </member>
        <member name="M:BlogCore.Controllers.TopicController.Get">
            <summary>
            获取Tibug所有分类
            </summary>
            <returns></returns>
        </member>
        <member name="T:BlogCore.Controllers.TopicDetailController">
            <summary>
            Tibug 管理
            </summary>
        </member>
        <member name="M:BlogCore.Controllers.TopicDetailController.#ctor(BlogCore.IServices.ITopicServices,BlogCore.IServices.ITopicDetailServices)">
            <summary>
            构造函数
            </summary>
            <param name="topicServices"></param>
            <param name="topicDetailServices"></param>
        </member>
        <member name="M:BlogCore.Controllers.TopicDetailController.Get(System.Int32,System.String,System.String)">
            <summary>
            获取Bug数据列表（带分页）
            【无权限】
            </summary>
            <param name="page">页数</param>
            <param name="tname">专题类型</param>
            <param name="key">关键字</param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.TopicDetailController.Get(System.Int32)">
            <summary>
            获取详情【无权限】
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.TopicDetailController.Post(BlogCore.Model.Models.TopicDetail)">
            <summary>
            添加一个 BUG 【无权限】
            </summary>
            <param name="topicDetail"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.TopicDetailController.Update(BlogCore.Model.Models.TopicDetail)">
            <summary>
            更新 bug
            </summary>
            <param name="topicDetail"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.TopicDetailController.Delete(System.Int32)">
            <summary>
            删除 bug
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BlogCore.Controllers.UserController">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="M:BlogCore.Controllers.UserController.#ctor(BlogCore.IServices.ISysUserInfoServices,BlogCore.IServices.IUserRoleServices,BlogCore.IServices.IRoleServices,BlogCore.Common.HttpContextUser.IUser)">
            <summary>
            构造函数
            </summary>
            <param name="sysUserInfoServices"></param>
            <param name="userRoleServices"></param>
            <param name="roleServices"></param>
            <param name="user"></param>
        </member>
        <member name="M:BlogCore.Controllers.UserController.Get(System.Int32,System.String)">
            <summary>
            获取全部用户
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.UserController.GetInfoByToken(System.String)">
            <summary>
            获取用户详情根据token
            【无权限】
            </summary>
            <param name="token">令牌</param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.UserController.Post(BlogCore.Model.Models.sysUserInfo)">
            <summary>
            添加一个用户
            </summary>
            <param name="sysUserInfo"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.UserController.Put(BlogCore.Model.Models.sysUserInfo)">
            <summary>
            更新用户与角色
            </summary>
            <param name="sysUserInfo"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.UserController.Delete(System.Int32)">
            <summary>
            删除用户
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BlogCore.Controllers.ValuesController.Get">
            <summary>
            get vluaes
            </summary>
            <returns></returns>
        </member>
        <member name="T:BlogCore.MiddleWares.RequRespLogMildd">
            <summary>
            中间件
            记录请求和响应数据
            </summary>
        </member>
        <member name="F:BlogCore.MiddleWares.RequRespLogMildd._next">
            <summary>
            
            </summary>
        </member>
        <member name="M:BlogCore.MiddleWares.RequRespLogMildd.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
        <member name="T:Blog.Core.Controllers.ClaimsController">
            <summary>
            这是一个测试的控制器，主要为了测试基于Claim的验证机制
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.ClaimsController.BatchDelete(System.String)">
            <summary>
            测试批量删除，如果是axios，记得要把数组格式化成 stringQuery
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.UserRoleController">
            <summary>
            用户角色关系
            【无权限】
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.UserRoleController.#ctor(BlogCore.IServices.ISysUserInfoServices,BlogCore.IServices.IUserRoleServices,BlogCore.IServices.IRoleServices)">
            <summary>
            构造函数
            </summary>
            <param name="sysUserInfoServices"></param>
            <param name="userRoleServices"></param>
            <param name="roleServices"></param>
        </member>
        <member name="M:Blog.Core.Controllers.UserRoleController.AddUser(System.String,System.String)">
            <summary>
            新建用户
            </summary>
            <param name="loginName"></param>
            <param name="loginPwd"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.UserRoleController.AddRole(System.String)">
            <summary>
            新建Role
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.UserRoleController.AddUserRole(System.Int32,System.Int32)">
            <summary>
            新建用户角色关系
            </summary>
            <param name="uid"></param>
            <param name="rid"></param>
            <returns></returns>
        </member>
    </members>
</doc>
